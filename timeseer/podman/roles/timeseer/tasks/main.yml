- name: Prepare a storage directory
  ansible.builtin.file:
    path: "{{ timeseer_dir }}/db"
    owner: 1001
    mode: "0755"
    state: directory
  when: timeseer_podman_volume | default('') | trim == ''

- name: Prepare a read-only data directory
  ansible.builtin.file:
    path: "{{ timeseer_dir }}/data"
    owner: 1001
    mode: "0755"
    state: directory

- name: Set storage path to podman volume
  ansible.builtin.set_fact:
    timeseer_storage_mount: "{{ timeseer_podman_volume }}"
  when: timeseer_podman_volume | default('') | trim != ''

- name: Set storage path to timeseer default storage_path
  ansible.builtin.set_fact:
    timeseer_storage_mount: "{{ timeseer_db_dir }}/db"
  when: timeseer_podman_volume | default('') | trim == ''

- name: Check for timeseer-reverse-proxy file state
  ansible.builtin.stat:
    path: /etc/containers/systemd/timeseer-container.container
  register: timeseer_config_file

- name: Create a podman network
  containers.podman.podman_network:
    name: "{{ timeseer_network }}"

- name: Download demo data
  containers.podman.podman_container:
    name: timeseer-demo-data
    auto_remove: true
    detach: false
    image: "{{ timeseer_image }}"
    command: "python -m timeseer.cli demo-data"
    state: started
    volumes:
      - "{{ timeseer_dir }}/data:/usr/src/app/data"
    log_driver: journald
    log_options:
      tag: "{{ timeseer_journal_tag }}"
    tty: true
  when: timeseer_download_demo_data

- name: Create timeseer quadlet file
  containers.podman.podman_container:
    name: timeseer
    image: "{{ timeseer_image }}"
    user: "1001"
    network: "{{ timeseer_network }}"
    volumes: "{{ timeseer_volume_list }}"
    state: quadlet
    quadlet_filename: timeseer-container
    quadlet_options:
      - |
        [Service]
        Restart=always
        [Install]
        WantedBy=default.target
    ports: "{{ timeseer_ports if timeseer_ports and timeseer_ports != '' else omit }}"
    log_options:
      tag: "{{ timeseer_reverse_proxy_journal_tag }}"
      path: "/dev/null"
      max_size: "0"
    tty: true
  vars:
    timeseer_base_volumes:
      - "{{ timeseer_dir }}/data:/usr/src/app/data"
      - "{{ timeseer_storage_mount }}:/usr/src/app/db{{ ':z' if ansible_selinux['status'] == 'enabled' else '' }}"
    timeseer_custom_toml_volume:
      - "{{ timeseer_config_dir }}:/usr/src/app/config/:ro"
    timeseer_volume_list: "{{ timeseer_base_volumes + (timeseer_custom_toml_volume if timeseer_config_dir | default('') | trim != '' else []) }}"
  notify:
    - Reload systemd daemon
    - Restart timeseer service

- name: Check if linger is enabled
  ansible.builtin.command:
    cmd: "loginctl show-user {{ ansible_user }} -p Linger"
  changed_when: false
  register: linger_status

- name: Handle file not existing
  ansible.builtin.systemd:
    daemon_reload: true
  when: not timeseer_config_file.stat.exists

- name: Enable linger for the user if not already enabled
  ansible.builtin.command:
    cmd: "loginctl enable-linger {{ ansible_user }}"
  when: "'Linger=yes' not in linger_status.stdout"
  changed_when: "linger_status.stdout.find('Linger=yes') == -1"

- name: Enable timeseer-container service
  ansible.builtin.systemd:
    name: timeseer-container
    enabled: true

- name: Start timeseer-container service
  ansible.builtin.systemd:
    name: timeseer-container
    state: started
